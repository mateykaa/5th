/*!
\file
\brief Заголовочный файл с описанием классов

Данный файл содержит в себе опредления основных
классов, используемых в программе
*/
#ifndef FUNC_H
#define FUNC_H
#include <QByteArray>
#include <QString>
#include <QDebug>
#include <QVector>
#include "singletondb.h"
#include <QTextStream>
#include <QtMath>
#include <cmath>

/**
 * Функция для авторизации пользователя.
 *
 * @param login Логин пользователя.
 * @param password Пароль пользователя.
 * @param socket_id Идентификатор сокета.
 * @return Статус авторизации.
 */
QString authorization(QString login, QString password, QString socket_id);

/**
 * Функция для регистрации пользователя.
 *
 * @param login Логин пользователя.
 * @param password Пароль пользователя.
 * @param email Email пользователя.
 * @param role Роль пользователя.
 * @param surname Фамилия пользователя.
 * @param name Имя пользователя.
 * @return Статус регистрации.
 */
QString reg(QString login,QString password, QString email, QString role, QString surname, QString name);

/**
 * Функция для обновления статуса пользователя.
 *
 * @param login Логин пользователя.
 * @param task_num Номер задачи.
 * @param YN_t Ответ пользователя (y/n).
 * @return Статус обновления.
 */
QString upd_stat(QString login, QString task_num, QString YN_t);

/*!
\brief Разбирает строку и возвращает вектор векторов целых чисел.
\param input Входная строка, которую необходимо разобрать.
\return Вектор векторов целых чисел, полученных из разбора строки.

Данная функция разбирает входную строку и преобразует ее в двумерный
вектор целых чисел. Каждый внутренний вектор представляет одну строку
чисел, а внешний вектор представляет все строки.
*/
std::vector<std::vector<int>> parseString(QString input);

/*!
\brief Разбирает строку и возвращает вектор целых чисел.
\param str Входная строка, которую необходимо разобрать.
\return Вектор целых чисел, полученных из разбора строки.

Данная функция разбирает входную строку и преобразует ее в вектор
целых чисел. Каждый элемент вектора представляет одно число из строки.
*/
std::vector<int> parseString1(QString str);

/*!
\brief Разбирает строку и возвращает вектор чисел с плавающей точкой.
\param str Входная строка, которую необходимо разобрать.
\return Вектор чисел с плавающей точкой, полученных из разбора строки.

Данная функция разбирает входную строку и преобразует ее в вектор
чисел с плавающей точкой. Каждый элемент вектора представляет одно число
из строки.
*/
std::vector<double> parseString3(QString str);

/*!
\brief Разбирает строку и возвращает вектор чисел с плавающей точкой.
\param str Входная строка, которую необходимо разобрать.
\return Вектор чисел с плавающей точкой, полученных из разбора строки.

Данная функция разбирает входную строку и преобразует ее в вектор
чисел с плавающей точкой. Каждый элемент вектора представляет одно число
из строки.
*/
std::vector<double> parseString2(QString str);

/*!
\brief Строит карту Карно для заданного варианта.
\param variant Вариант для построения карты Карно.
\return Строка, представляющая карту Карно.

Данная функция строит карту Карно для заданного варианта.
Вариант представляет собой строку, содержащую значения
переменных, которые заполняются в карту Карно.
Результатом функции является строка, представляющая
построенную карту Карно.
*/
QString buildKarnaughMap(QString variant);

/*!
\brief Проверяет систему функций на полноту.
\param values Векторы значений функций в системе.
\return "true", если система функций полна, иначе "false".

Данная функция принимает векторы значений функций, представленные в виде
двумерного вектора, и проверяет систему функций на полноту.
Возвращает "true", если система функций полна, и "false" в противном случае.
*/
QString task2(std::vector<std::vector<int>> values);

/*!
\brief Построение двойственной функции на основе входного вектора значений.
\param inputValues Входной вектор значений функции.
\return Строка, представляющая двойственную функцию.

Данная функция принимает входной вектор значений функции и строит
двойственную функцию на основе этого вектора.
Возвращает строку, представляющую двойственную функцию.
*/
QString task3(std::vector<int> inputValues);

/*!
\brief Проверяет функцию на линейность.
\param values Вектор значений функции.
\return "none", если нет монотонности, "incr" если возрастает, "decr" если убывает.

Данная функция принимает вектор значений функции и проверяет,
является ли функция линейной или монотонной.
Возвращает "none", если нет монотонности, "incr" если функция возрастает,
"decr" если функция убывает.
*/
QString task4(std::vector<int> values);

/**
 * @brief Строит двойственную функцию на основе заданных значений.
 *
 * @param values Вектор значений.
 * @return Вектор двойственной функции.
 */
std::vector<double> task5(std::vector<double> values);

/**
 * Функция для проверки ответа на задачу 1.
 *
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return Результат проверки (true/false).
 */
bool checkTask1(QString variant_for_task, QString task_ans_t);

/**
 * Функция для проверки ответа на задачу 2.
 *
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return Результат проверки (true/false).
 */
bool checkTask2(QString variant_for_task, QString task_ans_t);

/**
 * Функция для проверки ответа на задачу 3.
 *
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return Результат проверки (true/false).
 */
bool checkTask3(QString variant_for_task, QString task_ans_t);

/**
 * Функция для проверки ответа на задачу 4.
 *
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return Результат проверки (true/false).
 */
bool checkTask4(QString variant_for_task, QString task_ans_t);

/**
 * Функция для проверки ответа на задачу 5.
 *
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return Результат проверки (true/false).
 */
bool checkTask5(QString variant_for_task, QString task_ans_t);

/**
 * Функция для получения статистики пользователя.
 *
 * @param login Логин пользователя.
 * @return Статистика пользователя.
 */
QString get_stat(QString login);

/**
 * Функция для получения общей статистики всех пользователей, сортированной по убыванию.
 *
 * @return Общая статистика всех пользователей (отсортированная).
 */
QString get_stat_all();

/**
 * Функция для получения общей статистики всех пользователей, сортированной по убыванию.
 *
 * @return Общая статистика всех пользователей (отсортированная).
 */
QString get_stat_all_up();

/**
 * Функция для получения текста задачи по номеру.
 *
 * @param task_num Номер задачи.
 * @return Текст задачи.
 */
QString get_task(QString task_num);

/**
 * Функция для проверки ответа на задачу.
 *
 * @param login Логин пользователя.
 * @param task_num Номер задачи.
 * @param variant_for_task Вариант задачи.
 * @param task_ans_t Ответ на задачу.
 * @return with cutoff set at 2021-09-
*/
QString check_task_answer(QString login, QString task_num, QString variant_for_task, QString task_ans_t);

/*!
\brief Функция для выхода из программы.
\param login Логин пользователя.
\return Результат выполнения команды выхода.

Данная функция выполняет выход пользователя
из программы. Она отмечает пользователя как
неавторизованного в базе данных и возвращает
результат выполнения команды выхода.
*/
QString exit(QString login);

/*!
\brief Функция для парсинга входной строки команд.
\param source_str Входная строка команд.
\param socket_id Идентификатор сокета.
\return Результат выполнения команды парсинга.

Данная функция выполняет парсинг входной строки
команд и вызывает соответствующие функции в зависимости
от полученных данных. Возвращает результат выполнения
команды парсинга.
*/
QString parsing(QString source_str, QString socket_id);
#endif // FUNC_H
